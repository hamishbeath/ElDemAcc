mean(FiT_LSOA_PV_dom_data$cap_kW)
median(FiT_LSOA_PV_dom_data$cap_kW)
head(UKPVD_NPG_union[['2050']])
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_kW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_kW_df')#
# Combine into single df arranged by year (as per NPG data)#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_kW_df']][year])#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_kW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_kW_df')#
# Combine into single df arranged by year (as per NPG data)#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_kW_df']][year])#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
head(UKPVD_df)
head(UKPVD_df[c('LSOA','Meters_domestic')])
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')
head(NPG_combined_data_LSOA_df)
head(LSOA_LA_lookup_df)
LA
LA='Barnsley'
LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])
LSOAs
NPG_combined_data_LSOA_df$LSOA[which(NPG_combined_data_LSOA_df$LA==LA)]
NPG_combined_data_LSOA_df[which(NPG_combined_data_LSOA_df$LA==LA)]$LSOA
NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)]
sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list
head(NPG_combined_data_LSOA_year_df[['2050']])
N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])
N_meters
index=1
head(UKPVD_NPG_DFES_df[['2050']])
291.5870/282.5821*659
sum(UKPVD_NPG_DFES_df[['2050']]$Storage_sum_kW)
NPG_combined_data_list[['Stor_MW_df']][LA,'2050']*1000
head(NPG_combined_data_list[['Stor_MW_df']])
sum(NPG_combined_data_list[['Stor_MW_df']]['2050'])
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nonom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data)#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year]),#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 6. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / 40000000#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / 40000000#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 7. MAKE BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add EV number based on power to number conversion#
	df$EV_number <- df$EV_peak_Smart_kW / NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_SNomart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list
NG_FES_Microgeneration_GW_df
NG_FES_EVPeak_GW_df
NG_FES_Stor_Decentralised_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
NG_FES_Stor_Decentralised_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology
sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)
sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)
sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW) + sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10"))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 4. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(output_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(output_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
head(UKPVD_FES_df[['2050']])
NG_FES_EV_number_df['Battery Electric Cars',year]
NG_FES_EV_number_df
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]
NG_FES_EV_number_df
### 4. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(output_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
head(UKPVD_FES_df[['2050']])
head(UKPVD_FES_df[['2040']])
1284.2979/1404.7009*381.2387
1284.2979/1404.7009*1155
head(UKPVD_FES_df[['2040']])
head(UKPVD_FES_df[['2050']])
31310737+4500000
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)
NG_EV_Demand_kWperVehicle_Smart
NG_EV_Demand_kWperVehicle_NoSmart
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)
NG_EVs_per_household_2050
NG_EVs_per_household_2020
UKPN_EVs_per_household_2050
NPG_EVs_per_household_2050
NG_HPs_per_household
UKPN_HPs_per_household
NPG_HPs_per_household
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nonom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year]),#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx'
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nonom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year]),#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
UKPN_DFES_Stor_Nondom_kW_df
UKPN_DFES_Stor_Nonom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used
UKPN_DFES_Stor_Nonom_kW_df
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]
head(UKPN_DFES_PV_Nondom_kW_df)
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]),#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year]),#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
head(UKPVD_UKPN_DFES_df[['2050']])
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Domestic_kW_df']][year],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])
head(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)])
head(UKPN_combined_data_list[['PV_Domestic_kW_df']])
year
year='2030'
head(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)])
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year])
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year])
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year])
UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],
UKPN_combined_data_list[['BEVs_number_df']][year]
UKPN_combined_data_list[['BEV_vans_number_df']][year],
UKPN_combined_data_list[['BEV_vans_number_df']][year]
head(UKPN_DFES_BEV_vans_number_df)
UKPN_combined_data_list[['BEV_vans_number_df']][year]
names(UKPN_combined_data_list)
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')
lapply(UKPN_combined_data_list,head)
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','UKPN_DFES_Stor_Nonom_kW_df')
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
UKPN_combined_data_list[['Stor_Nondom_kW_df']][year]
UKPN_combined_data_list[['Stor_Dom_kW_df']][year]
UKPN_combined_data_list[['Hybrid_HPs_number_df']][year]
UKPN_combined_data_list[['PV_Nondom_kW_df']][year]
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nonom_kW_df')
UKPN_combined_data_list[['PV_Nondom_kW_df']][year]
UKPN_combined_data_list[['Stor_Dom_kW_df']][year]
UKPN_combined_data_list[['PV_Nondom_kW_df']][year]
lapply(UKPN_combined_data_list,head)
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
lapply(UKPN_combined_data_list,head)
year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between OA, LSOA, and MSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# ONS Table with centroids of LSOAs, units Eating and Northing (meters) used in finding nearest primary substation in ENW data source: https://geoportal.statistics.gov.uk/datasets/lower-layer-super-output-areas-december-2011-population-weighted-centroids date accessed: 13 Oct 2020#
ONS_LSOA_coords_input <-"ONS/Lower_Layer_Super_Output_Areas__December_2011__Population_Weighted_Centroids.csv"#
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, and PV deployment. Generated from raw data sources using 'Generate_UKPVD.R'#
UKPVD_input <- 'UKPVD_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- "National_Grid/fes-data-workbook-v30.xlsx" #
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
# ENW  Primary substation locations: https://www.enwl.co.uk/get-connected/network-information/heatmap-tool/ date accessed: 13 Oct 2020#
ENW_PrimarySubs_Location_input <- "DFES/ENW/heatmap-tool.xlsx"#
#
# ENW DFES 2019 data by primary substation https://www.enwl.co.uk/get-connected/network-information/dfes/ date accessed: 1 Oct 2020#
ENW_PDFES_input <- "DFES/ENW/dfes-2019-workbook_updated_version_20jul20.xlsx"#
### OUTPUT DATA#
FES_output <- 'UKPVD_Scenarios_FES2019_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 4. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(output_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 5. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 5a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 6. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 7. MAKE BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add EV number based on power to number conversion#
	df$EV_number <- df$EV_peak_Smart_kW / NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_SNomart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between OA, LSOA, and MSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# ONS Table with centroids of LSOAs, units Eating and Northing (meters) used in finding nearest primary substation in ENW data source: https://geoportal.statistics.gov.uk/datasets/lower-layer-super-output-areas-december-2011-population-weighted-centroids date accessed: 13 Oct 2020#
ONS_LSOA_coords_input <-"ONS/Lower_Layer_Super_Output_Areas__December_2011__Population_Weighted_Centroids.csv"#
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, and PV deployment. Generated from raw data sources using 'Generate_UKPVD.R'#
UKPVD_input <- 'UKPVD_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- "National_Grid/fes-data-workbook-v30.xlsx" #
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
# ENW  Primary substation locations: https://www.enwl.co.uk/get-connected/network-information/heatmap-tool/ date accessed: 13 Oct 2020#
ENW_PrimarySubs_Location_input <- "DFES/ENW/heatmap-tool.xlsx"#
#
# ENW DFES 2019 data by primary substation https://www.enwl.co.uk/get-connected/network-information/dfes/ date accessed: 1 Oct 2020#
ENW_PDFES_input <- "DFES/ENW/dfes-2019-workbook_updated_version_20jul20.xlsx"#
### OUTPUT DATA#
FES_output <- 'UKPVD_Scenarios_FES2019_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 4. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(output_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 5. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 5a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nonom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 6. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 7. MAKE BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add EV number based on power to number conversion#
	df$EV_number <- df$EV_peak_Smart_kW / NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_SNomart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
# Revise PV#
# ### DECIDED DEFINING LIMITS OF EDGE OF ENW NETWORK IS TOO COMPLICATED GIVEN DIFFERENT UNITS SO BLOCK COMMENTED OUT#
#
# ### 5c. ENW SCENARIOS#
# ##############################################################################################################
#
# ## First stage is mapping LSOAs to BSPs#
#
# # Import data#
# ONS_LSOA_coords_df<-read.csv(paste(input_path,ONS_LSOA_coords_input, sep=''), header=TRUE)#
# ENW_PrimarySubs_Location_df<-as.data.frame(read_excel(paste(input_path,ENW_PrimarySubs_Location_input, sep=''),sheet='4) Primary Headroom Data',range="B5:H376"))#
#
# # Rename columns#
# ONS_LSOA_coords_df  <- rename(ONS_LSOA_coords_df, c("lsoa11cd"="LSOA"))#
#
# ENW_PrimarySubs_Location_df  <- rename(ENW_PrimarySubs_Location_df, c("Primary Substation Location"="X"))#
# ENW_PrimarySubs_Location_df  <- rename(ENW_PrimarySubs_Location_df, c("X__2"="Y"))#
#
# # Exclude mess in first line#
# ENW_PrimarySubs_Location_df  <- ENW_PrimarySubs_Location_df[-1,]#
#
# # Select only relevant colummns#
# ONS_LSOA_coords_df<-ONS_LSOA_coords_df[c('X','Y','LSOA')]#
# ENW_PrimarySubs_Location_df<-ENW_PrimarySubs_Location_df[c('Primary Substation','X','Y')]#
#
# # Make R recognise numbers in coordinates#
# ENW_PrimarySubs_Location_df$X <- as.numeric(ENW_PrimarySubs_Location_df$X)#
# ENW_PrimarySubs_Location_df$Y <- as.numeric(ENW_PrimarySubs_Location_df$Y)#
#
# max_X = max(ENW_PrimarySubs_Location_df$X )#
# min_X = min(ENW_PrimarySubs_Location_df$X )#
# max_Y = max(ENW_PrimarySubs_Location_df$Y )#
# min_Y = min(ENW_PrimarySubs_Location_df$Y )#
# # Distance function #
# distance <- function(a, b){#
#                 dt <- data.table((ENW_PrimarySubs_Location_df$X-a)^2+(ENW_PrimarySubs_Location_df$Y-b)^2)#
#                 if (min(dt) >= 10000 & ){#
#                 	return('NA')#
#                 } else {#
#                 return(ENW_PrimarySubs_Location_df[['Primary Substation']][which.min(dt$V1)])#
#             	}#
#             }#
# ONS_LSOA_coords_dt<-data.table(ONS_LSOA_coords_df)#
#
# results <- ONS_LSOA_coords_dt[, j = list(Closest =  distance(X, Y)), by = 1:nrow(ONS_LSOA_coords_dt)]#
# read.csv(paste(input_path,ONS_LSOA_coords_input, sep=''), header=TRUE)#
# # ENW  Primary substation locations: https://www.enwl.co.uk/get-connected/network-information/heatmap-tool/ date accessed: 13 Oct 2020#
# ENW_PrimarySubs_Location_input <- "DFES/ENW/heatmap-tool.xlsx"#
#
# # ENW DFES 2019 data by primary substation https://www.enwl.co.uk/get-connected/network-information/dfes/ date accessed: 1 Oct 2020#
# ENW_PDFES_input <- "DFES/ENW/dfes-2019-workbook_updated_version_20jul20.xlsx"#
# Get some aggregrate properties#
UKPN_domestic_growth<-sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2050']])/sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2020']])
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add EV number based on power to number conversion#
	df$EV_number <- df$EV_peak_Smart_kW / NPG_Aggregate_EV_Demand_kWperVehicle_Smart#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_SNomart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list
UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)
year
year='2030'
UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)
UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_SNomart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]
df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list
head(df)
head(df,n=50)
head(UKPVD_NPG_union)
head(UKPVD_NPG_union[['2050']])
sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)
sum(UKPVD_NPG_union[['2050']]$Stor_kW)
sum(UKPVD_UKPN_union[['2050']]$Stor_kW)
head(UKPVD_UKPN_union)
head(UKPVD_UKPN_union[['2050']])
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)
sum(NPG_over_NG_Stor_2050 <- UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
)
NPG_over_NG_Stor_2050 <- UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW/sum(UKPVD_NPG_union[['2050']]$Stor_kW)
NPG_over_NG_Stor_2050
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)
NPG_over_NG_Stor_2050
UKPN_over_NG_Stor_2050
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)
UKPN_over_NG_Stor_2050
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)
NG_Stor_per_household <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)
NG_Stor_per_household
NPG_Stor_per_household_2050
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)
UKPN_Stor_per_household_2050
head(df)
names(df)
### 7. MAKE BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	return(df)#
})#
#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list
UKPVD_base_scenarios_df_list[['2050']]
head(UKPVD_base_scenarios_df_list[['2050']])
head(UKPVD_FES_df[['2050']])
### 5b. UKPN SCENARIOS#
##############################################################################################################
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 6. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
#
# Storage - comparison between NG and DFES:#
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)#
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 7. MAKE BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	return(df)#
})#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)#
#
# Revise PV
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nondom_kW_df)
head(UKPVD_base_scenarios_df_list$2050)
head(UKPVD_base_scenarios_df_list[['2050']])
head(UKPVD_FES_df[['2050']])
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})
DFES_base_output <- 'UKPVD_Scenarios_DFES_base_'
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- "National_Grid/fes-data-workbook-v30.xlsx" #
#
### OUTPUT DATA#
FES_output <- 'UKPVD_Scenarios_FES2019_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 2. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 3. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(intermediate_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between LA and LSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- 'FES/UKPVD_Scenarios_FES2019_'#
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
### OUTPUT DATA#
DFES_base_output <- 'UKPVD_Scenarios_DFES_base_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data by year#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	 UKPVD_FES_df_year<-read.csv(paste(intermediate_path,NG_FES_input,year,'.csv', sep=''), header=TRUE)#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 4. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 4a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 4b  UKPN SCENARIOS#
##############################################################################################################
#
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 5. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
#
# Storage - comparison between NG and DFES:#
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)#
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 6. MAKE ND EXPORT LSOA LEVEL BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"N_Substations","GMT_Substation_Proportion",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})#
#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)#
# Get some aggregrate properties#
UKPN_domestic_growth<-sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2050']])/sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2020']])
head(UKPVD_FES_df)
UKPVD_FES_df[['2050']]
head(UKPVD_FES_df[['2050']])
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- "National_Grid/fes-data-workbook-v30.xlsx" #
#
### OUTPUT DATA#
FES_output <- 'UKPVD_Scenarios_FES2019_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,NG_FES_input, sep=''), header=TRUE)#
#
### 2. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 3. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(intermediate_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
head(UKPVD_FES_df[['2050']])
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between LA and LSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- 'FES/UKPVD_Scenarios_FES2019_'#
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
### OUTPUT DATA#
DFES_base_output <- 'UKPVD_Scenarios_DFES_base_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data by year#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	 UKPVD_FES_df_year<-read.csv(paste(intermediate_path,NG_FES_input,year,'.csv', sep=''), header=TRUE)#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 4. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 4a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 4b  UKPN SCENARIOS#
##############################################################################################################
#
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 5. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
#
# Storage - comparison between NG and DFES:#
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)#
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 6. MAKE ND EXPORT LSOA LEVEL BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"N_Substations","GMT_Substation_Proportion",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})#
#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)#
# Get some aggregrate properties#
UKPN_domestic_growth<-sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2050']])/sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2020']])
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between LA and LSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- 'FES/UKPVD_Scenarios_FES2019_'#
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
### OUTPUT DATA#
DFES_base_output <- 'UKPVD_Scenarios_DFES_base_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data by year#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	 UKPVD_year_df<-read.csv(paste(intermediate_path,NG_FES_input,year,'.csv', sep=''), header=TRUE)#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 4. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 4a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 4b  UKPN SCENARIOS#
##############################################################################################################
#
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 5. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
#
# Storage - comparison between NG and DFES:#
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)#
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 6. MAKE ND EXPORT LSOA LEVEL BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"N_Substations","GMT_Substation_Proportion",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})#
#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)#
# Get some aggregrate properties#
UKPN_domestic_growth<-sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2050']])/sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2020']])
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- "National_Grid/fes-data-workbook-v30.xlsx" #
#
### OUTPUT DATA#
FES_output <- 'UKPVD_Scenarios_FES2019_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 2. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data (Community Renewables scenario only)#
NG_FES_Microgeneration_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='3.2',range="O8:AZ13"))#
NG_FES_EVPeak_GW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.24',range="L7:AV10"))#
NG_FES_EV_number_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ED5',range="G9:AP10",col_names=FALSE))#
NG_FES_HeatPumps_Installations_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='4.12',range="K8:S22"))#
NG_FES_Stor_Decentralised_MW_df <- as.data.frame(read_excel(paste(input_path,NG_FES_input, sep=''),sheet='ES1',range="G38:AM38",col_names=FALSE))#
#
# Rename columns where appropriate#
names(NG_FES_Microgeneration_GW_df)<-c('Attribute',2014:2050)#
names(NG_FES_EVPeak_GW_df)<-c('Charging_regime',2015:2050)#
names(NG_FES_EV_number_df)<-c(2015:2050)#
names(NG_FES_HeatPumps_Installations_df)[1]<-'Technology'#
names(NG_FES_Stor_Decentralised_MW_df)<-c(2018:2050)#
#
rownames(NG_FES_Microgeneration_GW_df)<-NG_FES_Microgeneration_GW_df$Attribute#
rownames(NG_FES_EVPeak_GW_df)<-NG_FES_EVPeak_GW_df$Charging_regime#
rownames(NG_FES_EV_number_df)<-c('Battery Electric Cars','Battery Electric Vans')#
rownames(NG_FES_HeatPumps_Installations_df)<-NG_FES_HeatPumps_Installations_df$Technology#
# Select only relevant rows & colums#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[years_of_interest_list]#
NG_FES_Microgeneration_GW_df <- NG_FES_Microgeneration_GW_df[c('Micro'),]#
#
NG_FES_EVPeak_GW_df <- NG_FES_EVPeak_GW_df[years_of_interest_list]#
#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c('Technology',years_of_interest_list)]#
NG_FES_HeatPumps_Installations_df <- NG_FES_HeatPumps_Installations_df[c("ASHP", "GSHP","Hybrid heat pump gas boiler"),]#
### 3. APPLY NG FES SCENARIOS TO UKPVD AND EXPORT#
##############################################################################################################
#
# Total number of domestic meters, used in allocating across LSOAs below#
#
Total_N_dom_meters<-sum(UKPVD_df$Meters_domestic)#
#
# Apply scenarios for each year in separate dataframes and export#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	# Dataframe to use in loop, to fill with values for the year in question and then return as an output#
	UKPVD_year_df<-UKPVD_df#
#
	# Apply microgeneration growth factor to no. of PV installations and total capacity#
	PV_growth_factor<-NG_FES_Microgeneration_GW_df['Micro',year]/NG_FES_Microgeneration_GW_df['Micro','2020']#
	UKPVD_year_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')] <- PV_growth_factor * UKPVD_df[c('PV_domestic_sum_kW','PV_domestic_installations','PV_nondom_sum_kW','PV_nondom_installations')]#
#
	# Add peak EV demand per LSOA (here just equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural)#
	UKPVD_year_df['EV_peak_NoSmart_kW']<-NG_FES_EVPeak_GW_df['No Smart Charging or V2G',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['EV_peak_Smart_kW']<-NG_FES_EVPeak_GW_df['With smart charging',year]*1000000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add peak EV number per LSOA#
	UKPVD_year_df['EV_number']<-(NG_FES_EV_number_df['Battery Electric Cars',year] + NG_FES_EV_number_df['Battery Electric Vans',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add number of heat pumps demand per LSOA (equal proportion of total UK demand per meter with no regard to whether the LSOA is urban or rural, but separated into standard and hybrid)#
	UKPVD_year_df['Heatpumps_nonhybrid_installations']<-(NG_FES_HeatPumps_Installations_df['ASHP',year]+NG_FES_HeatPumps_Installations_df['GSHP',year]) * UKPVD_df$Meters_domestic / Total_N_dom_meters#
	UKPVD_year_df['Heatpumps_hybrid_installations']<-NG_FES_HeatPumps_Installations_df['Hybrid heat pump gas boiler',year] * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	# Add storage per LSOA (equal proportion of total UK demand per meter)#
	UKPVD_year_df['Stor_kW']<-NG_FES_Stor_Decentralised_MW_df[1,year] * 1000 * UKPVD_df$Meters_domestic / Total_N_dom_meters#
#
	write.table(UKPVD_year_df, paste(intermediate_path,'FES/',FES_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list
# Script to generate NG scenarios from UKPVD database directly from data sources#
# Sheridan Few, Oct 2020#
# See also readme file#
#
### PACKAGES#
#
library(data.table) # For fread to import subset of data (saving memory) - not currently implememnted#
library(plyr) # For renaming data frame columns#
library(stringr)#
library(readxl)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google Drive/Grantham/JUICE/Data/R/UKPVD_revised_2020/'#
input_path <- paste(root_path,'Input_data/',sep='')#
intermediate_path <- paste(root_path,'Intermediate_data/',sep='') # This is where UKPVD is kept#
output_path <- paste(root_path,'Output_data/',sep='') # NB. These are the same here - output here is intermediate#
#
### INPUT DATA#
# ONS Table to convert between LA and LSOA, source: https://geoportal.statistics.gov.uk/datasets/output-area-to-lsoa-to-msoa-to-local-authority-district-december-2017-lookup-with-area-classifications-in-great-britain/data date accessed: 8 Oct 2020#
ONS_OA_LSOA_MSOA_LA_conversion_input <- "ONS/Output_Area_to_LSOA_to_MSOA_to_Local_Authority_District__December_2017__Lookup_with_Area_Classifications_in_Great_Britain.csv" #
#
# UKPVD containing recent LSOA-level data on spatial area, population, rurality, meter data, PV deployment, and substation density. Generated from raw data sources using 'Generate_UKPVD.R', and substation data added using 'Add_substations_to_UKPVD.R'#
UKPVD_input <- 'UKPVD_w_substations_Oct2020.csv'#
#
# National Grid Future Energy Scenarios 2019 data workbook source: https://www.nationalgrideso.com/future-energy/future-energy-scenarios/fes-2019-documents date accessed: 9 Oct 2020#
NG_FES_input <- 'FES/UKPVD_Scenarios_FES2019_'#
#
# DFES Inputs:#
# Northern Powergrid 2019 data workbook source: https://odileeds.org/projects/northernpowergrid/dfes/ date accessed: 1 Oct 2020#
NPG_DFES_input <- "DFES/NPG/Local Authority View - All Data for Northern Powergrid DFES 2019.xlsx"#
#
# UKPN 2019 data workbook source: https://innovation.ukpowernetworks.co.uk/2020/02/06/distribution-future-energy-scenarios/ date accessed: 1 Oct 2020#
UKPN_DFES_PV_input <- "DFES/UKPN/UKPN-small-scale-PV-scenarios-LSOA-1.xlsx"#
UKPN_DFES_EV_input <- "DFES/UKPN/UKPN-electric-car-scenarios-LSOA.xlsx"#
UKPN_DFES_EV_vans_input <- "DFES/UKPN/UKPN-electric-van-scenarios-LSOA.xlsx"#
UKPN_DFES_HP_input <- 'DFES/UKPN/UKPN-domestic-heating-technologies-scenarios_renewable-LSOA.xlsx' #
UKPN_DFES_Stor_Dom_input <- 'DFES/UKPN/UKPN-domestic-battery-scenarios-LSOA.xlsx' #
UKPN_DFES_Stor_Nondom_input <- 'DFES/UKPN/UKPN-industrial-and-commercial-battery-storage-scenarios-LSOA.xlsx' #
#
### OUTPUT DATA#
DFES_base_output <- 'UKPVD_Scenarios_DFES_base_'#
#
# VARIABLES (USED GLOBALLY)#
#
# Definition of years of interest#
years_of_interest_list<-c('2020','2030','2040','2050')#
#
### DO STUFF#
#
### 1. IMPORT ONS DATA WITH CORRESPONDENCE BETWEEN OAs, LSOAs, MSOAs, and LAs (later used in processing NPG data which is at an LA level)#
##############################################################################################################
#
# Import data#
OA_LSOA_MSOA_LA_df<-read.csv(paste(input_path,ONS_OA_LSOA_MSOA_LA_conversion_input, sep=''), header=TRUE)#
#
# Rename columns#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("OA11CD"="OA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LSOA11CD"="LSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("MSOA11CD"="MSOA"))#
OA_LSOA_MSOA_LA_df  <- rename(OA_LSOA_MSOA_LA_df, c("LAD17NM"="LA"))#
#
# Select only relevant colummns#
OA_LSOA_MSOA_LA_df<-OA_LSOA_MSOA_LA_df[c('OA','LSOA','MSOA','LA')]#
#
# Extract unique identifiers and generate lookup tables for which which LSOAs are in an LA#
LSOA_LA_df=subset(OA_LSOA_MSOA_LA_df, select=c("LSOA", "LA"))#
LSOA_LA_lookup_df=unique(LSOA_LA_df)#
### 2. IMPORT UKPVD#
##############################################################################################################
#
# Import data#
UKPVD_df<-read.csv(paste(intermediate_path,UKPVD_input, sep=''), header=TRUE)#
#
### 3. IMPORT NG FES SCENARIOS#
##############################################################################################################
#
# Import data by year#
#
UKPVD_FES_df <- lapply(years_of_interest_list,function(year)#
{#
	 UKPVD_year_df<-read.csv(paste(intermediate_path,NG_FES_input,year,'.csv', sep=''), header=TRUE)#
	return(UKPVD_year_df)#
}#
)#
#
names(UKPVD_FES_df) <- years_of_interest_list#
### 4. IMPORT dFES SCENARIOS AND REPLACE VALUES WITH THESE IN UKPVD SCENARIOS#
##############################################################################################################
#
### 4a. NPG SCENARIOS#
##############################################################################################################
#
# Import NPG scenario data (only 'Community Renewables' scenario)#
#
NPG_DFES_DomPV_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='DomPV_MW-CR',range="A1:AI40"))#
NPG_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='EVs-CR',range="A1:AI40"))#
NPG_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='HeatPumps-CR',range="A1:AI40"))#
NPG_DFES_Stor_MW_df<-as.data.frame(read_excel(paste(input_path,NPG_DFES_input, sep=''),sheet='Storage_MW-CR',range="A1:AI40")) # Storage not currently used#
#
# Combine into list#
#
NPG_combined_data_list<-list(NPG_DFES_DomPV_MW_df,NPG_DFES_EVs_number_df,NPG_DFES_HPs_number_df,NPG_DFES_Stor_MW_df)#
#
# Select only relevant rows and columns (and rename)#
#
NPG_combined_data_list<-lapply(NPG_combined_data_list,function(df){#
	df  <- rename(df, c("Local Authority"="LA"))#
	rownames(df)<-df$LA#
	df_out <- df[c(years_of_interest_list)]#
	return(df_out)#
}#
)#
#
names(NPG_combined_data_list)<-c('DomPV_MW_df','EVs_number_df','HPs_number_df','Stor_MW_df')#
#
# Convert to LSOA level (by dividing equally between LSOAs in the LA - several steps following the same thinking as converting MSOA level data for nondom demand in creating the UKPVD)#
#
## Get list of NPG LAs#
NPG_LAs<-rownames(NPG_combined_data_list[[1]])#
#
## Make df ready for LSOA level data containing every LSOA in LAs covered by NPG#
NPG_combined_data_LSOA_df <- LSOA_LA_lookup_df[is.element(LSOA_LA_lookup_df$LA, NPG_LAs),]#
#
# Add columns for LSOA level variables (to be filled in subsequent 'lapply' routine)#
NPG_combined_data_LSOA_df$PV_domestic_sum_kW<-NA#
NPG_combined_data_LSOA_df$EVs_number<-NA#
NPG_combined_data_LSOA_df$Heatpumps_LSOA_number<-NA#
NPG_combined_data_LSOA_df$Storage_sum_kW<-NA#
#
# Add number of meters (used in allocating techs across LSOA)#
NPG_combined_data_LSOA_df <- merge(NPG_combined_data_LSOA_df,UKPVD_df[c('LSOA','Meters_domestic')],by='LSOA')#
# Routine to divide between constituent LSOAs - I wrote this a while ago and it's a bit slow and clunky, but it works#
#
# Make df containing DFES values for each year of interest:#
UKPVD_NPG_DFES_df<-lapply(years_of_interest_list, function(year) {#
	print(paste('Running for year: ', year,sep=''))#
	# Duplicate df with all LSOAs to process here ( needs redoing each time because it's a global variable - bit messy)#
	NPG_combined_data_LSOA_year_df<<-NPG_combined_data_LSOA_df#
	# Run across LAs of interest list#
	# Function to divide LA level data between LSOAs and put into NPG_combined_data_LSOA_df frame. Lapply across list of LAs in NPG region.#
	lapply(NPG_LAs,function(LA){#
		# Get LA level data for the LA currently being processed#
		DomPV_LA_kW <- NPG_combined_data_list[['DomPV_MW_df']][LA,year]*1000#
		EVs_LA_number <- NPG_combined_data_list[['EVs_number_df']][LA,year]#
		HPs_LA_number <- NPG_combined_data_list[['HPs_number_df']][LA,year]#
		Stor_LA_kW <- NPG_combined_data_list[['Stor_MW_df']][LA,year]*1000#
#
		# Which LSOAs are in this LA? How many of them are there?#
		LSOAs=as.vector(LSOA_LA_lookup_df$LSOA[which(LSOA_LA_lookup_df$LA==LA)])#
		N_LSOAs <- length(LSOAs)#
#
		# How many domestic meters are in this LA?#
		N_meters <- sum(NPG_combined_data_LSOA_df$Meters_domestic[which(NPG_combined_data_LSOA_df$LA==LA)])#
#
		# Divide LA level data by number of LSOAs in that LA#
		PV_domestic_sum_kW_per_meter <- DomPV_LA_kW/N_meters#
		EVs_LSOA_number_per_meter <- EVs_LA_number/N_meters#
		HPs_LSOA_number_per_meter <- HPs_LA_number/N_meters#
		Stor_LSOA_kW_per_meter <- Stor_LA_kW/N_meters#
#
		# Put newly calculated data into global NPG_combined_data_LSOA_df dataframe by LSOA#
		lapply (LSOAs, function(LSOA) {#
			index = which(NPG_combined_data_LSOA_df$LSOA==LSOA)#
			NPG_combined_data_LSOA_year_df$PV_domestic_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * PV_domestic_sum_kW_per_meter#
			NPG_combined_data_LSOA_year_df$EVs_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * EVs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Heatpumps_LSOA_number[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * HPs_LSOA_number_per_meter#
			NPG_combined_data_LSOA_year_df$Storage_sum_kW[index] <<- NPG_combined_data_LSOA_year_df$Meters_domestic[index] * Stor_LSOA_kW_per_meter#
		})#
	})#
	return(NPG_combined_data_LSOA_year_df)#
})#
#
names(UKPVD_NPG_DFES_df)<-years_of_interest_list#
### 4b  UKPN SCENARIOS#
##############################################################################################################
#
# Import Data#
#
UKPN_DFES_SmallScalePV_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_PV_input, sep=''),sheet='Small Scale PV',range="A1:AT63925"))#
UKPN_DFES_EVs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_input, sep=''),sheet='Cars',range="A1:AS31963"))#
UKPN_DFES_EV_vans_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_EV_vans_input, sep=''),sheet='Vans',range="A1:AS31963"))#
UKPN_DFES_HPs_number_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_HP_input, sep=''),sheet='Domestic Heating Technologies',range="A1:AS63925"))#
UKPN_DFES_Stor_Dom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Dom_input, sep=''),sheet='Domestic Batteries',range="A1:AS31963")) # Storage not currently used#
UKPN_DFES_Stor_Nondom_kW_df<-as.data.frame(read_excel(paste(input_path,UKPN_DFES_Stor_Nondom_input, sep=''),sheet='Rounded',range="A1:AS31963")) # Storage not currently used#
#
# Split data where relevant (PV and HP)#
#
UKPN_DFES_PV_Domestic_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='Domestic PV capacity'),]#
UKPN_DFES_PV_Nondom_kW_df<-UKPN_DFES_SmallScalePV_kW_df[which(UKPN_DFES_SmallScalePV_kW_df$Parameter=='I&C PV capacity'),]#
#
UKPN_DFES_PureHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Heat Pump'),]#
UKPN_DFES_HybridHPs_number_df<-UKPN_DFES_HPs_number_df[which(UKPN_DFES_HPs_number_df$Parameter=='Hybrid Heat Pump'),]#
#
UKPN_DFES_BEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEVs_number_df<-UKPN_DFES_EVs_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='PHEV'),]#
#
UKPN_DFES_BEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
UKPN_DFES_PHEV_vans_number_df<-UKPN_DFES_EV_vans_number_df[which(UKPN_DFES_EVs_number_df$Parameter=='BEV'),]#
#
# Combine into list#
UKPN_combined_data_list<-list(UKPN_DFES_PV_Domestic_kW_df,UKPN_DFES_PV_Nondom_kW_df,UKPN_DFES_BEVs_number_df,UKPN_DFES_PHEVs_number_df,UKPN_DFES_BEV_vans_number_df,UKPN_DFES_PHEV_vans_number_df,UKPN_DFES_PureHPs_number_df,UKPN_DFES_HybridHPs_number_df,UKPN_DFES_Stor_Dom_kW_df,UKPN_DFES_Stor_Nondom_kW_df)#
#
# Select only relevant rows and columns (and rename)#
UKPN_combined_data_list<-lapply(UKPN_combined_data_list,function(df){#
	df  <- rename(df, c("LSOA11CD"="LSOA"))#
	df <- df[which(df$Scenario=='High' | df$Scenario=='Engaged Society' ),]#
	df_out <- df[c('LSOA',years_of_interest_list)]#
	return(df_out)#
}#
)#
names(UKPN_combined_data_list)<-c('PV_Domestic_kW_df','PV_Nondom_kW_df','BEVs_number_df','PHEVs_number_df','BEV_vans_number_df','PHEV_vans_number_df','Pure_HPs_number_df','Hybrid_HPs_number_df','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
# Combine into single df arranged by year (as per NPG data) Vans and cars added together as for NG FES#
#
UKPVD_UKPN_DFES_df <- lapply(years_of_interest_list, function(year) {#
	year_df <- cbind(UKPN_combined_data_list[['PV_Domestic_kW_df']][c('LSOA',year)],#
		UKPN_combined_data_list[['PV_Nondom_kW_df']][year],#
		UKPN_combined_data_list[['BEVs_number_df']][year]+UKPN_combined_data_list[['BEV_vans_number_df']][year],#
		UKPN_combined_data_list[['PHEVs_number_df']][year]+UKPN_combined_data_list[['PHEV_vans_number_df']][year],#
		UKPN_combined_data_list[['Pure_HPs_number_df']][year],#
		UKPN_combined_data_list[['Hybrid_HPs_number_df']][year],#
		UKPN_combined_data_list[['Stor_Dom_kW_df']][year],#
		UKPN_combined_data_list[['Stor_Nondom_kW_df']][year])#
#
	names(year_df) <- c('LSOA','PV_domestic_sum_kW','PV_Nondom_kW','BEVs_number','PHEVs_number','Pure_HPs_number','Hybrid_HPs_number','Stor_Dom_kW_df','Stor_Nondom_kW_df')#
	return(year_df)#
	})#
#
names(UKPVD_UKPN_DFES_df)<-years_of_interest_list#
### 5. CONVERSIONS/COMPARISONS#
##############################################################################################################
UKPVD_UKPN_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA')#
})#
names(UKPVD_UKPN_union)<-years_of_interest_list#
#
UKPVD_NPG_union <- lapply(years_of_interest_list,function(year){#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_NPG_DFES_year_relabelled_df,by='LSOA')#
})#
#
names(UKPVD_NPG_union)<-years_of_interest_list#
#
# PV per household#
#
NG_PV_dom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_PV_nondom_per_household <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_PV_dom_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_PV_dom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
UKPN_PV_nondom_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_PV_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_PV_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_PV_domestic_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Dom/nondom PV per demand#
#
NG_PV_dom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_domestic_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_domestic_sum_kWh)#
NG_PV_nondom_per_dem_2050 <- sum(UKPVD_FES_df[['2050']]$PV_nondom_sum_kW)/sum(UKPVD_FES_df[['2050']]$Demand_nondom_sum_kWh)#
#
UKPN_PV_dom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_domestic_sum_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_domestic_sum_kWh)#
UKPN_PV_nondom_per_dem_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_PV_Nondom_kW)/sum(UKPVD_UKPN_union[['2050']]$Demand_nondom_sum_kWh)#
#
# EVs per household#
#
NG_EVs_per_household_2020 <- sum(UKPVD_FES_df[['2020']]$EV_number)/sum(UKPVD_FES_df[['2020']]$Meters_domestic)#
NG_EVs_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$EV_number)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_EVs_per_household_2020 <- sum(UKPVD_UKPN_union[['2020']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2020']]$Meters_domestic)#
UKPN_EVs_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
#
NPG_EVs_per_household_2020 <- sum(UKPVD_NPG_union[['2020']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2020']]$Meters_domestic)#
NPG_EVs_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
# Growth Factors for EVs#
#
NG_EV_Growth_Factor_2020_2050_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_NoSmart_kW)#
NG_EV_Growth_Factor_2020_2050_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_FES_df[['2020']]$EV_peak_Smart_kW)#
#
UKPN_EV_Growth_Factor_2020_2050 <- sum(UKPVD_UKPN_DFES_df[['2050']]$BEVs_number)/sum(UKPVD_UKPN_DFES_df[['2020']]$BEVs_number)#
NPG_EV_Growth_Factor_2020_2050 <- sum(UKPVD_NPG_DFES_df[['2050']]$EVs_number)/sum(UKPVD_NPG_DFES_df[['2020']]$EVs_number)#
#
# HPs per household#
#
NG_HPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
NG_HybridHPs_per_household <- sum(UKPVD_FES_df[['2050']]$Heatpumps_hybrid_installations)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_HPs_per_household <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_HPs_per_household <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_proportion_NG_HPs_per_household_2050 <- UKPN_HPs_per_household/NG_HPs_per_household#
NPG_proportion_NG_HPs_per_household_2050 <- NPG_HPs_per_household/NG_HPs_per_household#
#
UKPN_proportion_NG_HPs_Total_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Pure_HPs_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
NPG_proportion_NG_HPs_Total_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Heatpumps_LSOA_number)/sum(UKPVD_FES_df[['2050']]$Heatpumps_nonhybrid_installations)#
#
# Storage - comparison between NG and DFES:#
NG_Stor_per_household_2050 <- sum(UKPVD_FES_df[['2050']]$Stor_kW)/sum(UKPVD_FES_df[['2050']]$Meters_domestic)#
#
UKPN_Stor_per_household_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Meters_domestic)#
NPG_Stor_per_household_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Meters_domestic)#
#
UKPN_over_NG_Stor_2050 <- sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)/sum(UKPVD_UKPN_union[['2050']]$Stor_kW)#
NPG_over_NG_Stor_2050 <- sum(UKPVD_NPG_union[['2050']]$NPG_Storage_sum_kW)/sum(UKPVD_NPG_union[['2050']]$Stor_kW)#
# Calibrate NG EV demand to dFES number of vehicles -> get aggregate demand per vehicle -> get nukber of vehicles & aggregate demand for each LSOA#
#
# A sense check - if every car becomes an EV (same as current number of cars, ~40 million), what would NG demand be per vehicle?#
#
NG_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_FES_df[['2050']]$EV_peak_NoSmart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
NG_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_FES_df[['2050']]$EV_peak_Smart_kW) / sum(UKPVD_FES_df[['2050']]$EV_number)#
#
# This number (and that below for NPG, which is similar) seem surprisingly low to me (approx 0.6/0.3kW per vehicle depending on smart/non smart charging), but scenarios are broadly similar and results similar to the above for NG - NG say no ICEs on the road by 2050, and UKPN/NPG scenarios have the same.#
#
UKPN_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
UKPN_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_UKPN_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_UKPN_union[['2050']]$UKPN_BEVs_number)#
#
NPG_Aggregate_EV_Demand_kWperVehicle_NoSmart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_NoSmart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
NPG_Aggregate_EV_Demand_kWperVehicle_Smart <- sum(UKPVD_NPG_union[['2050']]$EV_peak_Smart_kW)/sum(UKPVD_NPG_union[['2050']]$NPG_EVs_number)#
### 6. MAKE ND EXPORT LSOA LEVEL BASE SCENARIO COMBINING ELEMENTS OF NG FES, and UKPN and NPG DFES#
##############################################################################
#
# Combine scenarios by year in lapply loop#
#
UKPVD_base_scenarios_df_list <- lapply(years_of_interest_list,function(year){#
	# Add UKPN data#
	UKPVD_UKPN_DFES_year_relabelled_df<-UKPVD_UKPN_DFES_df[[year]]#
	colnames(UKPVD_UKPN_DFES_year_relabelled_df) <- c('LSOA',paste("UKPN", colnames(UKPVD_UKPN_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(UKPVD_FES_df[[year]],UKPVD_UKPN_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Add NPG data#
	UKPVD_NPG_DFES_year_relabelled_df<-UKPVD_NPG_DFES_df[[year]]#
	colnames(UKPVD_NPG_DFES_year_relabelled_df) <- c('LSOA',paste("NPG", colnames(UKPVD_NPG_DFES_year_relabelled_df)[-1], sep = "_"))#
	df <- merge(df,UKPVD_NPG_DFES_year_relabelled_df,by='LSOA',all=TRUE)#
#
	# Replace generic data with UKPN and NPG data for regions where this is available#
#
	UKPN_indices <- which(! is.na(df$UKPN_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[UKPN_indices,][['PV_domestic_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]#
	df[UKPN_indices,][['PV_domestic_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet. Close to mean of 3.5 from Ofgem data.#
	df[UKPN_indices,][['PV_nondom_sum_kW']]<-df[UKPN_indices,][['UKPN_PV_Nondom_kW']]#
	df[UKPN_indices,][['PV_nondom_installations']]<-df[UKPN_indices,][['UKPN_PV_domestic_sum_kW']]/63.6 # Mean nondom PV capacity based on Ofgem data (within 4 - 150kW range specified in UKPN DFES datasheet)#
#
	df[UKPN_indices,][['EV_number']]<-df[UKPN_indices,][['UKPN_BEVs_number']]#
	df[UKPN_indices,][['EV_peak_Smart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[UKPN_indices,][['EV_peak_NoSmart_kW']]<-df[UKPN_indices,][['UKPN_BEVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[UKPN_indices,][['Heatpumps_nonhybrid_installations']]<-df[UKPN_indices,][['UKPN_Pure_HPs_number']]#
	df[UKPN_indices,][['Heatpumps_hybrid_installations']]<-df[UKPN_indices,][['UKPN_Hybrid_HPs_number']]#
#
	df[UKPN_indices,][['Stor_kW']]<-df[UKPN_indices,][['UKPN_Stor_Dom_kW_df']] + df[UKPN_indices,][['UKPN_Stor_Nondom_kW_df']]#
	NPG_indices <- which(! is.na(df$NPG_PV_domestic_sum_kW), arr.ind=TRUE)#
	df[NPG_indices,][['PV_domestic_sum_kW']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]#
	df[NPG_indices,][['PV_domestic_installations']]<-df[NPG_indices,][['NPG_PV_domestic_sum_kW']]/4 # Assumed 4kW capacity of residential installations as per UKPN DFES datasheet#
	df[NPG_indices,][['EV_number']]<-df[NPG_indices,][['NPG_EVs_number']]#
	df[NPG_indices,][['EV_peak_Smart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_Smart#
	df[NPG_indices,][['EV_peak_NoSmart_kW']]<-df[NPG_indices,][['NPG_EVs_number']] * NG_EV_Demand_kWperVehicle_NoSmart#
	df[NPG_indices,][['Heatpumps_nonhybrid_installations']]<-df[NPG_indices,][['NPG_Heatpumps_LSOA_number']]#
#
	df[NPG_indices,][['Stor_kW']]<-df[NPG_indices,][['NPG_Storage_sum_kW']]#
#
	df <- df[c("LSOA","Area_km2","Rurality_code","Meters_domestic","Demand_domestic_sum_kWh","Meters_nondom","Demand_nondom_sum_kWh",#
		"N_Substations","GMT_Substation_Proportion",#
		"PV_domestic_sum_kW","PV_domestic_installations", "PV_nondom_sum_kW", "PV_nondom_installations",#
		"EV_peak_Smart_kW", "EV_number", "Heatpumps_nonhybrid_installations", "Stor_kW")]#
#
	write.table(df, paste(output_path,'DFES/',DFES_base_output,year,'.csv', sep=''), sep=",", row.names=FALSE)#
#
	return(df)#
})#
#
names(UKPVD_base_scenarios_df_list) <- years_of_interest_list#
sum(UKPVD_UKPN_union[['2050']]$UKPN_Stor_Dom_kW_df + UKPVD_UKPN_union[['2050']]$UKPN_Stor_Nonom_kW_df)#
# Get some aggregrate properties#
UKPN_domestic_growth<-sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2050']])/sum(UKPN_combined_data_list[[1]][which(UKPN_combined_data_list[[1]]$Parameter=='Domestic PV capacity'),][['2020']])
# Script to process excel outputs from CREST demand model and generate cleaner csv files for analysis in later scripts#
# Sheridan Few, Oct 2020#
# NB. xlsx_to_csvs.sh should be run between using CREST model and this script to convert file format. (Alternatively, this script could be adapted to read xlsx directly, and rename files)#
# See also readme file#
#
### PACKAGES#
#
library(data.table)#
library(zoo)#
library(plyr)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google\ Drive/Grantham/Demand/'#
input_path <- paste(root_path,'CREST/Excel_Outputs/',sep='')#
output_path <- paste(root_path,'CREST/Processed_Load/',sep='')#
#
# DO STUFF#
#
setwd(input_path)#
#
# List of 'Load_by_Device' input files - there will be one of these for each combination of location, access tier, and month of interest#
#
 files <- list.files(path=input_path, pattern="Load_By_Device_*", full.names=TRUE, recursive=FALSE) # List of disagg files containing usage data. These were downloaded from the Meshpower server based upon an SQL query to find mac_address names which have at some point been associated with Gitaraga#
 files <- Filter(function(x) any(grepl(".csv", x)), files) # only include csvs - to avoid accidetally trying to process an excel file#
 files <- Filter(function(x) !any(grepl("Tier1", x)), files) # remove Tier 1 - because this has only one nonero column, this causes problems in making clean mean data#
#
# Loop over each of these files #
#
for (file in files){#
#
	print(paste('Processing file ',file,sep=''))#
#
	# GET AND RESHAPE DATA#
#
	# Get names of input files#
	input_file<-file # Appliances input file#
	d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
	file_no_path<-gsub(input_file, pattern = paste(input_path,'/',sep=''), replacement = "") #
	name_abbrev<-gsub(file_no_path, pattern = ".csv", replacement = "") #
	name_abbrev<-gsub(name_abbrev, pattern = "Load_By_Device_", replacement = "") #
#
	# Deal with messy import files#
	headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
	df = read.csv(input_file, skip = 6, header = F)#
	colnames(df)= headers#
	df <- head(df, -2)[1:33] #
#
	d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
	d_df = read.csv(d_input_file, skip = 6, header = F)#
	colnames(d_df)= d_headers#
#
	# Rename phone -> mobile#
	df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
#
	# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
	df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
	#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
	# Rename/drop heating & cooling by tier as appropriate#
#
	if(grepl('Tier1', file, fixed = TRUE) == TRUE)#
	{#
		df[['Cooling']] <- NULL#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier2', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Fan"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier3', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier4', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier5', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Conditioning"))#
		df  <- rename(df, c("Heating"="Electric Water Heater"))#
	}#
	# Get R to recognise time column as times#
	#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
	df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
	# Export complete set of loads by tier#
	write.table(df, paste(output_path,'All_loads_',name_abbrev,'.csv',sep=''), sep=",", row.names=FALSE)#
}
head(df)
new_mtx <- exp_mtx [which(rowSums(exp_mtx) > 0), ]
which(colSums(df) == 0)
colSums(df)
help(colSums)
colSums(as.matrix(df))
rowSums(df)
SelectVar[, colSums(SelectVar != 0) > 0]
df[, colSums(df != 0) > 0]
head(df)
head(df[, colSums(df != 0) > 0])
# Script to process excel outputs from CREST demand model and generate cleaner csv files for analysis in later scripts#
# Sheridan Few, Oct 2020#
# NB. xlsx_to_csvs.sh should be run between using CREST model and this script to convert file format. (Alternatively, this script could be adapted to read xlsx directly, and rename files)#
# See also readme file#
#
### PACKAGES#
#
library(data.table)#
library(zoo)#
library(plyr)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google\ Drive/Grantham/Demand/'#
input_path <- paste(root_path,'CREST/Excel_Outputs/',sep='')#
output_path <- paste(root_path,'CREST/Processed_Load/',sep='')#
#
# DO STUFF#
#
setwd(input_path)#
#
# List of 'Load_by_Device' input files - there will be one of these for each combination of location, access tier, and month of interest#
#
 files <- list.files(path=input_path, pattern="Load_By_Device_*", full.names=TRUE, recursive=FALSE) # List of disagg files containing usage data. These were downloaded from the Meshpower server based upon an SQL query to find mac_address names which have at some point been associated with Gitaraga#
 files <- Filter(function(x) any(grepl(".csv", x)), files) # only include csvs - to avoid accidetally trying to process an excel file#
 files <- Filter(function(x) !any(grepl("Tier1", x)), files) # remove Tier 1 - because this has only one nonero column, this causes problems in making clean mean data#
#
# Loop over each of these files #
#
for (file in files){#
#
	print(paste('Processing file ',file,sep=''))#
#
	# GET AND RESHAPE DATA#
#
	# Get names of input files#
	input_file<-file # Appliances input file#
	d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
	file_no_path<-gsub(input_file, pattern = paste(input_path,'/',sep=''), replacement = "") #
	name_abbrev<-gsub(file_no_path, pattern = ".csv", replacement = "") #
	name_abbrev<-gsub(name_abbrev, pattern = "Load_By_Device_", replacement = "") #
#
	# Deal with messy import files#
	headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
	df = read.csv(input_file, skip = 6, header = F)#
	colnames(df)= headers#
	df <- head(df, -2)[1:33] #
#
	d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
	d_df = read.csv(d_input_file, skip = 6, header = F)#
	colnames(d_df)= d_headers#
#
	# Rename phone -> mobile#
	df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
#
	# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
	df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
	#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
	# Rename/drop heating & cooling by tier as appropriate#
#
	if(grepl('Tier1', file, fixed = TRUE) == TRUE)#
	{#
		df[['Cooling']] <- NULL#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier2', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Fan"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier3', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier4', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier5', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Conditioning"))#
		df  <- rename(df, c("Heating"="Electric Water Heater"))#
	}#
	# Drop columns with all zero values#
	df<-df[, colSums(df != 0) > 0]#
#
	# Get R to recognise time column as times#
	#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
	df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
	# Export complete set of loads by tier#
	write.table(df, paste(output_path,'All_loads_',name_abbrev,'.csv',sep=''), sep=",", row.names=FALSE)#
}
head(df)
# Script to process excel outputs from CREST demand model and generate cleaner csv files for analysis in later scripts#
# Sheridan Few, Oct 2020#
# NB. xlsx_to_csvs.sh should be run between using CREST model and this script to convert file format. (Alternatively, this script could be adapted to read xlsx directly, and rename files)#
# See also readme file#
#
### PACKAGES#
#
library(data.table)#
library(zoo)#
library(plyr)#
#
### PATH DEFINITION#
#
root_path <- '/Users/Shez/Google\ Drive/Grantham/Demand/'#
input_path <- paste(root_path,'CREST/Excel_Outputs/',sep='')#
output_path <- paste(root_path,'CREST/Processed_Load/',sep='')#
#
# DO STUFF#
#
setwd(input_path)#
#
# List of 'Load_by_Device' input files - there will be one of these for each combination of location, access tier, and month of interest#
#
 files <- list.files(path=input_path, pattern="Load_By_Device_*", full.names=TRUE, recursive=FALSE) # List of disagg files containing usage data. These were downloaded from the Meshpower server based upon an SQL query to find mac_address names which have at some point been associated with Gitaraga#
 files <- Filter(function(x) any(grepl(".csv", x)), files) # only include csvs - to avoid accidetally trying to process an excel file#
 files <- Filter(function(x) !any(grepl("Tier1", x)), files) # remove Tier 1 - because this has only one nonero column, this causes problems in making clean mean data#
#
# Loop over each of these files #
#
for (file in files){#
#
	print(paste('Processing file ',file,sep=''))#
#
	# GET AND RESHAPE DATA#
#
	# Get names of input files#
	input_file<-file # Appliances input file#
	d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
	file_no_path<-gsub(input_file, pattern = paste(input_path,'/',sep=''), replacement = "") #
	name_abbrev<-gsub(file_no_path, pattern = ".csv", replacement = "") #
	name_abbrev<-gsub(name_abbrev, pattern = "Load_By_Device_", replacement = "") #
#
	# Deal with messy import files#
	headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
	df = read.csv(input_file, skip = 6, header = F)#
	colnames(df)= headers#
	df <- head(df, -2)[1:33] #
#
	d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
	d_df = read.csv(d_input_file, skip = 6, header = F)#
	colnames(d_df)= d_headers#
#
	# Rename phone -> mobile#
	df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
	df  <- rename(df, c("TV 1"="TV"))#
	df  <- rename(df, c("Personal computer"="Laptop"))#
#
	# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
	df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
	#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
	# Rename/drop heating & cooling by tier as appropriate#
#
	if(grepl('Tier1', file, fixed = TRUE) == TRUE)#
	{#
		df[['Cooling']] <- NULL#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier2', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Fan"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier3', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier4', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier5', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Conditioning"))#
		df  <- rename(df, c("Heating"="Electric Water Heater"))#
	}#
	# Drop columns with all zero values - not currently used#
	#df<-df[, colSums(df != 0) > 0]#
#
	# Get R to recognise time column as times#
	#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
	df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
	# Export complete set of loads by tier#
	write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
}
file
file
files
files_no_path<-gsub(files, pattern = paste(input_path,'/',sep=''), replacement = "")
files_no_path
load_data_by_file<-lapply(files, function(file){#
#
	print(paste('Processing file ',file,sep=''))#
#
	# GET AND RESHAPE DATA#
#
	# Get names of input files#
	input_file<-file # Appliances input file#
	d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
	file_no_path<-gsub(input_file, pattern = paste(input_path,'/',sep=''), replacement = "") #
	name_abbrev<-gsub(file_no_path, pattern = ".csv", replacement = "") #
	name_abbrev<-gsub(name_abbrev, pattern = "Load_By_Device_", replacement = "") #
#
	# Deal with messy import files#
	headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
	df = read.csv(input_file, skip = 6, header = F)#
	colnames(df)= headers#
	df <- head(df, -2)[1:33] #
#
	d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
	d_df = read.csv(d_input_file, skip = 6, header = F)#
	colnames(d_df)= d_headers#
#
	# Rename phone -> mobile#
	df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
	df  <- rename(df, c("TV 1"="TV"))#
	df  <- rename(df, c("Personal computer"="Laptop"))#
#
	# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
	df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
	#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
	# Rename/drop heating & cooling by tier as appropriate#
#
	if(grepl('Tier1', file, fixed = TRUE) == TRUE)#
	{#
		df[['Cooling']] <- NULL#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier2', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Fan"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier3', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier4', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier5', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Conditioning"))#
		df  <- rename(df, c("Heating"="Electric Water Heater"))#
	}#
	# Drop columns with all zero values - not currently used#
	#df<-df[, colSums(df != 0) > 0]#
#
	# Get R to recognise time column as times#
	#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
	df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
	# Export complete set of loads by tier#
	write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
})#
#
# Get abbreviated names to name entries in data list#
files_no_path<-gsub(files, pattern = paste(input_path,'/',sep=''), replacement = "") #
names_abbrev<-gsub(files_no_path, pattern = ".csv", replacement = "") #
names_abbrev<-gsub(names_abbrev, pattern = "Load_By_Device_", replacement = "")
names(load_data_by_file)<-names_abbrev
names(load_data_by_file)
head(load_data_by_file[[]])
head(load_data_by_file[["Bhinjpur_20_1_Tier2"]])
head(load_data_by_file["Bhinjpur_20_1_Tier2"])
load_data_by_file
load_data_by_file<-lapply(files, function(file){#
#
	print(paste('Processing file ',file,sep=''))#
#
	# GET AND RESHAPE DATA#
#
	# Get names of input files#
	input_file<-file # Appliances input file#
	d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
	file_no_path<-gsub(input_file, pattern = paste(input_path,'/',sep=''), replacement = "") #
	name_abbrev<-gsub(file_no_path, pattern = ".csv", replacement = "") #
	name_abbrev<-gsub(name_abbrev, pattern = "Load_By_Device_", replacement = "") #
#
	# Deal with messy import files#
	headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
	df = read.csv(input_file, skip = 6, header = F)#
	colnames(df)= headers#
	df <- head(df, -2)[1:33] #
#
	d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
	d_df = read.csv(d_input_file, skip = 6, header = F)#
	colnames(d_df)= d_headers#
#
	# Rename phone -> mobile#
	df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
	df  <- rename(df, c("TV 1"="TV"))#
	df  <- rename(df, c("Personal computer"="Laptop"))#
#
	# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
	df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
	#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
	# Rename/drop heating & cooling by tier as appropriate#
#
	if(grepl('Tier1', file, fixed = TRUE) == TRUE)#
	{#
		df[['Cooling']] <- NULL#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier2', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Fan"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier3', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier4', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Cooler"))#
		df[['Heating']] <- NULL#
	}#
	if(grepl('Tier5', file, fixed = TRUE) == TRUE)#
	{#
		df  <- rename(df, c("Cooling"="Air Conditioning"))#
		df  <- rename(df, c("Heating"="Electric Water Heater"))#
	}#
	# Drop columns with all zero values - not currently used#
	#df<-df[, colSums(df != 0) > 0]#
#
	# Get R to recognise time column as times#
	#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
	df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
	# Export complete set of loads by tier#
	write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
	# Export df to list#
	return(df)#
})#
#
# Get abbreviated names to name entries in data list#
files_no_path<-gsub(files, pattern = paste(input_path,'/',sep=''), replacement = "") #
names_abbrev<-gsub(files_no_path, pattern = ".csv", replacement = "") #
names_abbrev<-gsub(names_abbrev, pattern = "Load_By_Device_", replacement = "")
names(load_data_by_file)
names(load_data_by_file)<-names_abbrev
head(load_data_by_file["Bhinjpur_20_1_Tier2"])
head(load_data_by_file[["Bhinjpur_20_1_Tier2"]])
# Split load data by dwelling index (also fixes data type of some columns#
split_load_CREST <- function (x,data){#
	load_data<-subset(data,data['Dwelling index']==x) # Subset by dwelling index#
	load_data<-cbind(load_data[3],load_data[1],load_data[,-c(1:3)])#
	load_data_numeric <- mutate_all(load_data[-1], function(x) as.numeric(as.character(x))) # Convert data to numeric (R doesn't recogines it as such yet - probs because input data has no decimal point)#
	load_data_out<-cbind(Time=load_data[['Time']],load_data_numeric)#
	return(load_data_out)#
}#
#
# Convert level to load (only relevant when using Meshpower data)#
lvl_to_load <- function(x){#
	x['led1_lvl']<-x['led1_lvl']*5/80#
	x['led2_lvl']<-x['led2_lvl']*5/80#
	x['led3_lvl']<-x['led3_lvl']*5/80#
	x['usb_lvl']<-x['usb_lvl']#
	x['tv_power']<-x['tv_power']#
	names(x) <- gsub(names(x), pattern = "_lvl", replacement = "")  #
	names(x) <- gsub(names(x), pattern = "_power", replacement = "") #
	return(x)#
	}#
#
# Convert minute by minute data to hourly mean. Would also work for other sub-hour temporal resolutions#
convert_to_hourly <- function(x){#
	data<-aggregate(x, list(cut(as.POSIXct(x$Time,tz='Africa/Kigali'), "1 hour")), mean)#
	out<-data[-1]#
	out$Time<-format(as.POSIXct(data[[1]],tz='Africa/Kigali'), "%H")#
	#out$Time<-as.POSIXct(data[[1]],tz='Africa/Kigali')#
	return(out)#
}
### 2. GENERATE HOURLY LOAD#
#
lapply(load_data_by_file,fucntion(file){#
	# Split dataframe into a list of dataframes representing each dwelling, indexed by the Dwelling index#
	customer_numbers <- unique(df[["Dwelling index"]])#
	df_by_customer <- lapply(customer_numbers, split_load_CREST, data=df )#
#
	# Convert data into hourly (mean load across each minute in each hour)#
	hourly_data <- lapply(df_by_customer, convert_to_hourly)#
#
	# Convert data into hourly (maximum load across each minute in each hour)#
	#hourly_peak_data <- lapply(df_by_customer, convert_to_hourly_peak)#
#
	# Combine all dwellings again (bit of redundancy here)#
	total_hourly_df=do.call(rbind,hourly_data)#
	#total_hourly_peak_df=do.call(rbind,hourly_peak_data)#
#
	# Get mean load across households by hour#
	mean_hourly=aggregate(total_hourly_df[-1][-1],by=list(total_hourly_df$Time), mean)#
	names(mean_hourly)[1] <- "Hour"#
	rownames(mean_hourly) <- mean_hourly$Hour#
	mean_hourly <- mean_hourly[-1]#
#
	return(mean_hourly)#
})
lapply(load_data_by_file,function(file){#
	# Split dataframe into a list of dataframes representing each dwelling, indexed by the Dwelling index#
	customer_numbers <- unique(df[["Dwelling index"]])#
	df_by_customer <- lapply(customer_numbers, split_load_CREST, data=df )#
#
	# Convert data into hourly (mean load across each minute in each hour)#
	hourly_data <- lapply(df_by_customer, convert_to_hourly)#
#
	# Convert data into hourly (maximum load across each minute in each hour)#
	#hourly_peak_data <- lapply(df_by_customer, convert_to_hourly_peak)#
#
	# Combine all dwellings again (bit of redundancy here)#
	total_hourly_df=do.call(rbind,hourly_data)#
	#total_hourly_peak_df=do.call(rbind,hourly_peak_data)#
#
	# Get mean load across households by hour#
	mean_hourly=aggregate(total_hourly_df[-1][-1],by=list(total_hourly_df$Time), mean)#
	names(mean_hourly)[1] <- "Hour"#
	rownames(mean_hourly) <- mean_hourly$Hour#
	mean_hourly <- mean_hourly[-1]#
#
	return(mean_hourly)#
})
library(dplyr)
lapply(load_data_by_file,function(file){#
	# Split dataframe into a list of dataframes representing each dwelling, indexed by the Dwelling index#
	customer_numbers <- unique(df[["Dwelling index"]])#
	df_by_customer <- lapply(customer_numbers, split_load_CREST, data=df )#
#
	# Convert data into hourly (mean load across each minute in each hour)#
	hourly_data <- lapply(df_by_customer, convert_to_hourly)#
#
	# Convert data into hourly (maximum load across each minute in each hour)#
	#hourly_peak_data <- lapply(df_by_customer, convert_to_hourly_peak)#
#
	# Combine all dwellings again (bit of redundancy here)#
	total_hourly_df=do.call(rbind,hourly_data)#
	#total_hourly_peak_df=do.call(rbind,hourly_peak_data)#
#
	# Get mean load across households by hour#
	mean_hourly=aggregate(total_hourly_df[-1][-1],by=list(total_hourly_df$Time), mean)#
	names(mean_hourly)[1] <- "Hour"#
	rownames(mean_hourly) <- mean_hourly$Hour#
	mean_hourly <- mean_hourly[-1]#
#
	return(mean_hourly)#
})
hourly_load<-lapply(load_data_by_file,function(file){#
	# Split dataframe into a list of dataframes representing each dwelling, indexed by the Dwelling index#
	customer_numbers <- unique(df[["Dwelling index"]])#
	df_by_customer <- lapply(customer_numbers, split_load_CREST, data=df )#
#
	# Convert data into hourly (mean load across each minute in each hour)#
	hourly_data <- lapply(df_by_customer, convert_to_hourly)#
#
	# Convert data into hourly (maximum load across each minute in each hour)#
	#hourly_peak_data <- lapply(df_by_customer, convert_to_hourly_peak)#
#
	# Combine all dwellings again (bit of redundancy here)#
	total_hourly_df=do.call(rbind,hourly_data)#
	#total_hourly_peak_df=do.call(rbind,hourly_peak_data)#
#
	# Get mean load across households by hour#
	mean_hourly=aggregate(total_hourly_df[-1][-1],by=list(total_hourly_df$Time), mean)#
	names(mean_hourly)[1] <- "Hour"#
	rownames(mean_hourly) <- mean_hourly$Hour#
	mean_hourly <- mean_hourly[-1]#
#
	return(mean_hourly)#
})
head(hourly_load[[1]])
hourly_load[[1]]
sum(hourly_load[[1]])
hourly_load[[1]]
sapply(hourly_load[[1]],sum)
lapply(hourly_load[[1]],sum)
sapply(hourly_load[[1]],,sum)
sapply(hourly_load[[1,]],sum)
sapply(transpose(hourly_load[[1]]),sum)
lapply(transpose(hourly_load[[1]]),sum)
lapply(hourly_load[[1]],sum)
sapply(transpose(hourly_load[[1]]),sum)
sapply(transpose(hourly_load[[1]]),sum)
rowsums(hourly_load[[1]])
rowSums(hourly_load[[1]])
mean_hourly_load<-lapply(load_data_by_file,function(file){#
	# Split dataframe into a list of dataframes representing each dwelling, indexed by the Dwelling index#
	customer_numbers <- unique(df[["Dwelling index"]])#
	df_by_customer <- lapply(customer_numbers, split_load_CREST, data=df )#
#
	# Convert data into hourly (mean load across each minute in each hour)#
	hourly_data <- lapply(df_by_customer, convert_to_hourly)#
#
	# Convert data into hourly (maximum load across each minute in each hour)#
	#hourly_peak_data <- lapply(df_by_customer, convert_to_hourly_peak)#
#
	# Combine all dwellings again (bit of redundancy here)#
	total_hourly_df=do.call(rbind,hourly_data)#
	#total_hourly_peak_df=do.call(rbind,hourly_peak_data)#
#
	# Get mean load across households by hour#
	mean_hourly=aggregate(total_hourly_df[-1][-1],by=list(total_hourly_df$Time), mean)#
	names(mean_hourly)[1] <- "Hour"#
	rownames(mean_hourly) <- mean_hourly$Hour#
	mean_hourly <- mean_hourly[-1]#
#
	return(rowSums(mean_hourly))#
})
names(load_data_by_file)<-names_abbrev
names(mean_hourly_load)<-names_abbrev
head(mean_hourly_load)
mean_hourly_load
# DO STUFF#
#
### 1. AMALGAMATE EXCEL OUTPUTS INTO ONE CLEAN SHEET CONTAINING APPLIANCE, HEATING, COOLING, & LIGHTING DATA#
#
# Loop over each combination of the variables below#
#
 villages<-c('Bhinjpur')#
 tiers<-c(1,2,3,4,5)#
 daytypes<-c('wd','we')#
 months<-c(6,7)#
#
load_data_by_village_tier_month_daytype<-lapply(villages, function(village)){#
	load_data_by_tier<-lapply(tiers, function(tier)){#
		load_data_by_month<-lapply(months, function(month)){#
			load_data_by_daytype<-lapply(daytypes, function(daytype)){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
				df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				#df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
# DO STUFF#
#
### 1. AMALGAMATE EXCEL OUTPUTS INTO ONE CLEAN SHEET CONTAINING APPLIANCE, HEATING, COOLING, & LIGHTING DATA#
#
# Loop over each combination of the variables below#
#
 villages<-c('Bhinjpur')#
 tiers<-c(1,2,3,4,5)#
 daytypes<-c('wd','we')#
 months<-c(6,7)#
#
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
				df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
villages
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(input_file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
				df  <- rename(df, c("Cordless telephone"="Mobile Phone"))#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
rlang::last_error()
villages<-c('Bhinjpur')#
 tiers<-c(1,2,3,4,5)#
 daytypes<-c('wd','we')#
 months<-c(6,7)#
#
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(input_file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
				df  <- rename(df, "Cordless telephone"="Mobile Phone")#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
rlang::last_error()
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(input_file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
				df  <- rename(df, "Cordless telephone" = "Mobile Phone")#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(input_file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
#
				df  <- rename(df, replace = c("Cordless telephone" = "Mobile Phone"))#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
load_data_by_village_tier_month_daytype<-lapply(villages, function(village){#
	load_data_by_tier<-lapply(tiers, function(tier){#
		load_data_by_month<-lapply(months, function(month){#
			load_data_by_daytype<-lapply(daytypes, function(daytype){#
				name_abbrev<-paste(village,"_Tier",tier,"_Month",month,"_",daytype,sep='')#
#
				print(paste('Processing ',name_abbrev,sep=''))#
#
				# GET AND RESHAPE DATA#
#
				# Get names of input files#
				input_file<-paste(input_path,"Load_By_Device_",village,"_Tier",tier,"_Month",month,"_",daytype,".csv",sep='')#
				d_input_file<- gsub(input_file, pattern = "Load_By_Device_", replacement = "Res_Disagg_")  # Second sheet containing lighting, heating, cooling load#
#
				# Deal with messiness in imported files#
				headers = read.csv(input_file, skip = 3, header = F, nrows = 1, as.is = T) #
				df = read.csv(input_file, skip = 6, header = F)#
				colnames(df)= headers#
				df <- head(df, -2)[1:33] #
#
				d_headers = read.csv(d_input_file, skip = 3, header = F, nrows = 1, as.is = T)#
				d_df = read.csv(d_input_file, skip = 6, header = F)#
				colnames(d_df)= d_headers#
#
				# Rename appliances where appropriate#
#
				df  <- rename(df, replace = c('Cordless telephone' = 'Mobile Phone'))#
				df  <- rename(df, c("TV 1"="TV"))#
				df  <- rename(df, c("Personal computer"="Laptop"))#
#
				# Combine appliance data with heating, cooling, and lighting columns of 'disaggregated' input file#
				df <- cbind(df,Cooling=d_df[['Electricity used by cooling system']],Heating=d_df[['Electricity used by heating system']],Lighting=d_df[['Lighting demand']]) #
				#df <- head(df, n=4320L) # Temporary measure to reduce size for debugging#
#
				# Rename/drop heating & cooling by tier as appropriate#
#
				if(tier == 1)#
				{#
					df[['Cooling']] <- NULL#
					df[['Heating']] <- NULL#
				}#
				if(tier == 2)#
				{#
					df  <- rename(df, c("Cooling"="Fan"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 3)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 4)#
				{#
					df  <- rename(df, c("Cooling"="Air Cooler"))#
					df[['Heating']] <- NULL#
				}#
				if(tier == 5)#
				{#
					df  <- rename(df, c("Cooling"="Air Conditioning"))#
					df  <- rename(df, c("Heating"="Electric Water Heater"))#
				}#
				# Drop columns with all zero values - not currently used#
				df<-df[, colSums(df != 0) > 0]#
#
				# Get R to recognise time column as times#
				#df['Time'] <- lapply(df['Time'], strptime, "%I:%M:%S %p")#
				df['Time'] <- lapply(df['Time'], strptime, "%H:%M:%S")#
#
				# Export complete set of loads by tier#
				write.table(df, paste(output_path,name_abbrev,'_all_loads.csv',sep=''), sep=",", row.names=FALSE)#
#
				# Export df to list#
				return(df)#
			})#
			names(load_data_by_daytype)<-daytypes#
			return(load_data_by_daytype)#
		})#
		names(load_data_by_month)<-months#
		return(load_data_by_month)#
	})	#
	names(load_data_by_month)<-tiers#
	return(load_data_by_tier)#
})#
names(load_data_by_village_tier_month_daytype)<-villages
